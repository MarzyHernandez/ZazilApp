Index: app/src/main/java/mx/acg/zazil/view/RegisterScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mx.acg.zazil.view\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavHostController\r\nimport mx.acg.zazil.R\r\nimport mx.acg.zazil.model.User\r\nimport mx.acg.zazil.viewmodel.RegisterViewModel\r\n\r\n\r\n/**\r\n * Pantalla de registro que permite al usuario introducir sus datos personales, aceptar términos y condiciones,\r\n * y realizar el registro en el servidor remoto a través de Retrofit.\r\n *\r\n * @param navController Controlador de navegación para cambiar entre pantallas.\r\n * @author Melissa Mireles Rendón\r\n */\r\n@Composable\r\nfun RegisterScreen(navController: NavHostController) {\r\n    val gabaritoFontFamily = FontFamily(Font(R.font.gabarito_regular))\r\n\r\n    // Variables para almacenar los datos de entrada del usuario\r\n    var nombre by remember { mutableStateOf(\"\") }\r\n    var apellido by remember { mutableStateOf(\"\") }\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var telefono by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var termsAccepted by remember { mutableStateOf(false) }  // Estado del checkbox de términos y condiciones\r\n    var errorMessage by remember { mutableStateOf<String?>(null) }  // Estado del checkbox de términos y condiciones\r\n\r\n    var showDialog by remember { mutableStateOf(false) } // Estado para controlar el diálogo\r\n\r\n    // Alcance de las coroutines\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    val viewModel: RegisterViewModel = viewModel()\r\n\r\n    val registerResult by viewModel.registerResult.observeAsState()\r\n\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n        // Imagen del logo en la parte superior derecha\r\n        Image(\r\n            painter = painterResource(id = R.drawable.logo),\r\n            contentDescription = \"Logo\",\r\n            modifier = Modifier\r\n                .size(200.dp)\r\n                .align(Alignment.TopEnd),\r\n            contentScale = ContentScale.Crop\r\n        )\r\n\r\n        // Columna que contiene el formulario de registro\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(24.dp)\r\n                .verticalScroll(rememberScrollState()),\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            // Título de la pantalla\r\n            Text(\r\n                text = \"Regístrate\",\r\n                fontSize = 32.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                fontFamily = gabaritoFontFamily,\r\n                color = Color.Black\r\n            )\r\n            // Mensaje de bienvenida\r\n            Text(\r\n                text = \"Te damos la bienvenida a Zazil\",\r\n                fontSize = 16.sp,\r\n                fontFamily = gabaritoFontFamily,\r\n                color = Color(0xFFE27F61),\r\n                modifier = Modifier.padding(top = 8.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(16.dp)) // Espacio entre el título y el formulario\r\n\r\n            // Formulario de registro\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp)\r\n            ) {\r\n                Text(\r\n                    text = \"Completa tus datos\",\r\n                    fontSize = 14.sp,\r\n                    color = Color.Black)\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Input de Nombre\r\n                SimpleTextInput(\r\n                    value = nombre,\r\n                    onValueChange = { nombre = it },\r\n                    label = \"Nombre(s)\"\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Input de Apellido\r\n                SimpleTextInput(\r\n                    value = apellido,\r\n                    onValueChange = { apellido = it },\r\n                    label = \"Apellido\"\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Input de Email\r\n                SimpleTextInput(\r\n                    value = email,\r\n                    onValueChange = { email = it },\r\n                    label = \"Correo\"\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Input de Teléfono\r\n                SimpleTextInput(\r\n                    value = telefono,\r\n                    onValueChange = { telefono = it },\r\n                    label = \"Teléfono\"\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Input de Contraseña\r\n                SimpleTextInput(\r\n                    value = password,\r\n                    onValueChange = { password = it },\r\n                    label = \"Contraseña\",\r\n                    isPassword = true\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Checkbox para aceptar términos y condiciones\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(\r\n                        checked = termsAccepted,\r\n                        onCheckedChange = { termsAccepted = it },\r\n                        colors = CheckboxDefaults.colors(checkedColor = Color(0xFFE27F61))\r\n                    )\r\n                    Text(\r\n                        text = \"Acepto\",\r\n                        fontSize = 14.sp,\r\n                        color = Color.Black)\r\n\r\n                    // Botón de términos y condiciones que activa el diálogo\r\n                    TextButton(onClick = { showDialog = true }) {\r\n                        Text(\r\n                            text = \"términos y condiciones\",\r\n                            color = Color(0xFFE27F61),\r\n                            fontSize = 14.sp,\r\n                            fontFamily = gabaritoFontFamily\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Botón de registro\r\n                Button(\r\n                    onClick = {\r\n                        if (termsAccepted) {\r\n                            val user = User(\r\n                                email = email,\r\n                                password = password,\r\n                                nombres = nombre,\r\n                                apellidos = apellido,\r\n                                telefono = telefono\r\n                            )\r\n                            viewModel.registerUser(user)\r\n                        } else {\r\n                            errorMessage = \"Debes aceptar los términos y condiciones\"\r\n                        }\r\n                    },\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFEBB7A7))\r\n                ) {\r\n                    Text(\r\n                        text = \"REGISTRAR\",\r\n                        color = Color.Black\r\n                    )\r\n                }\r\n\r\n                registerResult?.let {\r\n                    Text(\r\n                        text = it,\r\n                        color = if (it.contains(\"exitoso\")) Color.Green else Color.Red,\r\n                        modifier = Modifier.padding(top = 8.dp)\r\n                    )\r\n                }\r\n\r\n                // Mostrar el mensaje de error si aplica\r\n                errorMessage?.let {\r\n                    Text(\r\n                        text = it,\r\n                        color = Color.Red,\r\n                        modifier = Modifier.padding(top = 8.dp)\r\n                    )\r\n                }\r\n\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(top = 16.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    verticalArrangement = Arrangement.Center\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        horizontalArrangement = Arrangement.Center,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            text = \"¿Ya tienes cuenta?\",\r\n                            fontSize = 14.sp,\r\n                            fontFamily = gabaritoFontFamily\r\n                        )\r\n\r\n                        TextButton(onClick = {navController.navigate(\"login\")}) {\r\n                            Text(\r\n                                text = \"Iniciar sesión\",\r\n                                color = Color(0xFFE27F61),\r\n                                fontSize = 14.sp,\r\n                                fontFamily = gabaritoFontFamily\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(8.dp))\r\n\r\n                    Text(\r\n                        text = \"o regístrate vía\",\r\n                        fontFamily = gabaritoFontFamily,\r\n                        fontSize = 14.sp,\r\n                        color = Color.Black,\r\n                        modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                    )\r\n                }\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                // Botón de registro con Google\r\n                Button(\r\n                    onClick = { /* Lógica para registro con Google */ },\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFEE1D6))\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        horizontalArrangement = Arrangement.SpaceBetween,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(text = \"Google\", color = Color.Black)\r\n                        Icon(\r\n                            painter = painterResource(id = R.drawable.ic_google),\r\n                            contentDescription = \"Google Icon\",\r\n                            modifier = Modifier.size(24.dp),\r\n                            tint = Color.Unspecified\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Mostrar el AlertDialog con los términos y condiciones\r\n    if (showDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = { showDialog = false },\r\n            title = {\r\n                Text(\r\n                    text = \"Términos y Condiciones\",\r\n                    fontSize = 18.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            },\r\n            text = {\r\n                Column(modifier = Modifier.verticalScroll(rememberScrollState())) {\r\n                    Text(\r\n                        text = \"Al utilizar nuestra aplicación de tienda en línea, usted acepta cumplir con los siguientes términos y condiciones. Nuestra plataforma proporciona un espacio para la compra de productos a través de su dispositivo Android. Los precios, la disponibilidad de productos, y las ofertas especiales están sujetos a cambios sin previo aviso. Nos reservamos el derecho de modificar o descontinuar la aplicación en cualquier momento sin responsabilidad alguna hacia usted. Es su responsabilidad asegurarse de que la información de su cuenta y los datos proporcionados para la compra sean precisos y estén actualizados. El uso indebido de nuestra aplicación, como el intento de fraude o cualquier otra actividad ilegal, resultará en la cancelación de su cuenta y podría ser reportado a las autoridades competentes.\",\r\n                        fontSize = 14.sp,\r\n                        lineHeight = 22.sp,\r\n                        textAlign = TextAlign.Justify\r\n                    )\r\n                }\r\n            },\r\n            confirmButton = {\r\n                TextButton(onClick = { showDialog = false }) {\r\n                    Text(\"Cerrar\", color = Color(0xFFE27F61))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/mx/acg/zazil/view/RegisterScreen.kt b/app/src/main/java/mx/acg/zazil/view/RegisterScreen.kt
--- a/app/src/main/java/mx/acg/zazil/view/RegisterScreen.kt	(revision 7adf3757c4a5eee3f6785a3bc8e88214c2166660)
+++ b/app/src/main/java/mx/acg/zazil/view/RegisterScreen.kt	(date 1728068377478)
@@ -54,6 +54,11 @@
 
     val registerResult by viewModel.registerResult.observeAsState()
 
+    // Función para validar la contraseña
+    fun isPasswordValid(password: String): Boolean {
+        return password.length >= 6 && password.any { it.isDigit() }
+    }
+
     Box(modifier = Modifier.fillMaxSize()) {
         // Imagen del logo en la parte superior derecha
         Image(
@@ -144,7 +149,14 @@
                 // Input de Contraseña
                 SimpleTextInput(
                     value = password,
-                    onValueChange = { password = it },
+                    onValueChange = {
+                        password = it
+                        if (!isPasswordValid(it)) {
+                            errorMessage = "La contraseña debe tener al menos 6 caracteres e incluir al menos un número."
+                        } else {
+                            errorMessage = null  // La contraseña es válida
+                        }
+                    },
                     label = "Contraseña",
                     isPassword = true
                 )
@@ -176,10 +188,10 @@
 
                 Spacer(modifier = Modifier.height(16.dp))
 
-                // Botón de registro
+                // Botón de registro (desactivado si no se cumplen las condiciones)
                 Button(
                     onClick = {
-                        if (termsAccepted) {
+                        if (termsAccepted && isPasswordValid(password)) {
                             val user = User(
                                 email = email,
                                 password = password,
@@ -188,7 +200,7 @@
                                 telefono = telefono
                             )
                             viewModel.registerUser(user)
-                        } else {
+                        } else if (!termsAccepted) {
                             errorMessage = "Debes aceptar los términos y condiciones"
                         }
                     },
Index: app/src/main/java/mx/acg/zazil/view/SettingsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mx.acg.zazil.view\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport mx.acg.zazil.R\r\n\r\n@Composable\r\nfun SettingsScreen(navController: NavHostController, modifier: Modifier = Modifier) {\r\n    // Obtén la instancia de FirebaseAuth\r\n    val auth = FirebaseAuth.getInstance()\r\n\r\n    Box(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .background(Color(0xFFFEE1D6)) // Fondo color rosa\r\n            .padding(16.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .verticalScroll(rememberScrollState()) // Hacemos la columna scrolleable\r\n        ) {\r\n            // Título de Ajustes\r\n            Text(\r\n                text = \"Ajustes\",\r\n                fontSize = 28.sp,\r\n                color = Color(0xFF191919),\r\n                modifier = Modifier.padding(bottom = 16.dp)\r\n            )\r\n\r\n            // Opción \"Cerrar sesión\"\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 8.dp)\r\n                    .clickable {\r\n                        Log.d(\"SettingsScreen\", \"Cerrando sesión...\") // Log para rastrear cuando se clickea \"Cerrar sesión\"\r\n                        auth.signOut()  // Cierra la sesión de Firebase\r\n                        Log.d(\"SettingsScreen\", \"Sesión cerrada con éxito. Redirigiendo a la pantalla de login.\")\r\n                        navController.navigate(\"login\")  // Redirige al login\r\n                    },\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Icon(\r\n                    painter = painterResource(id = R.drawable.ic_logout),\r\n                    contentDescription = \"Cerrar sesión\",\r\n                    tint = Color.Black\r\n                )\r\n                Spacer(modifier = Modifier.width(8.dp))\r\n                Text(\r\n                    text = \"Cerrar sesión\",\r\n                    fontSize = 16.sp,\r\n                    color = Color(0xFF191919)\r\n                )\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            // Sección \"Mi Cuenta\"\r\n            Text(\r\n                text = \"MI CUENTA\",\r\n                fontSize = 16.sp,\r\n                color = Color(0xFF545454),\r\n                modifier = Modifier.padding(vertical = 8.dp)\r\n            )\r\n\r\n            SettingOption(title = \"Cambiar Contraseña\", iconResId = R.drawable.ic_password )\r\n            SettingOption(title = \"Actualizar Datos\", iconResId = R.drawable.ic_edit)\r\n            SettingOption(title = \"Eliminar Cuenta\", iconResId = R.drawable.ic_delete)\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            // Sección \"Acerca de\"\r\n            Text(\r\n                text = \"ACERCA DE\",\r\n                fontSize = 16.sp,\r\n                color = Color(0xFF545454),\r\n                modifier = Modifier.padding(vertical = 8.dp)\r\n            )\r\n\r\n            // Navegar a la pantalla de \"Sobre Nosotros\"\r\n            SettingOption(title = \"Sobre Nosotros\", iconResId = R.drawable.ic_about) {\r\n                navController.navigate(\"aboutUs\")\r\n            }\r\n\r\n            // Navegar a la pantalla de \"TyC\"\r\n            SettingOption(title = \"Términos y Condiciones\", iconResId = R.drawable.ic_terms) {\r\n                navController.navigate(\"TyC\")\r\n            }\r\n\r\n            SettingOption(title = \"Aviso de Privacidad\", iconResId = R.drawable.ic_privacy)\r\n            SettingOption(title = \"Créditos\", iconResId = R.drawable.ic_credits)\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            // Redes Sociales\r\n            Row(\r\n                horizontalArrangement = Arrangement.SpaceEvenly,\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                SocialMediaIcon(R.drawable.ic_facebook, \"https://www.facebook.com/share/mjfnrxUW55mwTEXk/?mibextid=LQQJ4d\")\r\n                SocialMediaIcon(R.drawable.ic_instagram, \"https://www.instagram.com/toallas.zazil?igsh=MTdtaXRmeXk3MWxqMw==\")\r\n                SocialMediaIcon(R.drawable.ic_tiktok, \"https://www.tiktok.com/@todas.brillamos?_t=8qDNNVLY1kz&_r=1\")\r\n                SocialMediaIcon(R.drawable.ic_web, \"https://zazilrrr.org/catalogo/zazil/index.php#\")\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            // Versión de la aplicación\r\n            Text(\r\n                text = \"v1.0.1\",\r\n                fontSize = 12.sp,\r\n                color = Color.Gray,\r\n                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SettingOption(title: String, iconResId: Int, onClick: () -> Unit = {}) {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(vertical = 8.dp)\r\n            .clickable { onClick() }  // Añadimos un callback para manejar clics\r\n            .clip(RoundedCornerShape(8.dp))\r\n            .background(Color.White)\r\n            .padding(16.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(id = iconResId),\r\n            contentDescription = title,\r\n            tint = Color(0xFFE17F61),\r\n            modifier = Modifier.size(24.dp)\r\n        )\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(text = title, fontSize = 16.sp, color = Color(0xFF191919))\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SocialMediaIcon(iconResId: Int, url: String) {\r\n    val context = LocalContext.current\r\n    IconButton(onClick = {\r\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\r\n        context.startActivity(intent)\r\n    }) {\r\n        Box(\r\n            modifier = Modifier\r\n                .size(50.dp) // Ajusta el tamaño de la caja para los íconos\r\n                .clip(CircleShape)\r\n                .background(Color(0xFFEBB7A7))\r\n        ) {\r\n            Image(\r\n                painter = painterResource(id = iconResId),\r\n                contentDescription = null,\r\n                modifier = Modifier\r\n                    .size(50.dp)\r\n                    .clip(CircleShape)\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/mx/acg/zazil/view/SettingsScreen.kt b/app/src/main/java/mx/acg/zazil/view/SettingsScreen.kt
--- a/app/src/main/java/mx/acg/zazil/view/SettingsScreen.kt	(revision 7adf3757c4a5eee3f6785a3bc8e88214c2166660)
+++ b/app/src/main/java/mx/acg/zazil/view/SettingsScreen.kt	(date 1728067412974)
@@ -112,9 +112,11 @@
             }
 
             SettingOption(title = "Aviso de Privacidad", iconResId = R.drawable.ic_privacy)
-            SettingOption(title = "Créditos", iconResId = R.drawable.ic_credits)
 
-            Spacer(modifier = Modifier.height(16.dp))
+            // Navegar a la pantalla de "Créditos"
+            SettingOption(title = "Créditos", iconResId = R.drawable.ic_credits) {
+                navController.navigate("credits")
+            }
 
             // Redes Sociales
             Row(
Index: app/src/main/java/mx/acg/zazil/view/CreditsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/mx/acg/zazil/view/CreditsScreen.kt b/app/src/main/java/mx/acg/zazil/view/CreditsScreen.kt
new file mode 100644
--- /dev/null	(date 1728072274762)
+++ b/app/src/main/java/mx/acg/zazil/view/CreditsScreen.kt	(date 1728072274762)
@@ -0,0 +1,140 @@
+package mx.acg.zazil.view
+
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.*
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import androidx.navigation.NavHostController
+import mx.acg.zazil.R
+
+@Composable
+fun CreditsScreen(navController: NavHostController) {
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .background(Color(0xFFEFEEEE))
+            .verticalScroll(rememberScrollState())
+    ) {
+        // ENCABEZADO
+        Box(
+            modifier = Modifier
+                .fillMaxWidth()
+                .clip(RoundedCornerShape(bottomEnd = 16.dp, bottomStart = 16.dp))
+                .background(Color(0xFFFEE1D6))
+                .padding(vertical = 16.dp)
+        ) {
+            Text(
+                text = "Créditos",
+                fontSize = 24.sp,
+                fontWeight = FontWeight.Bold,
+                modifier = Modifier.align(Alignment.Center),
+                color = Color(0xFF191919)
+            )
+        }
+
+        // Botón de regresar
+        TextButton(onClick = { navController.popBackStack() }) {
+            Text(
+                text = "< Regresar",
+                fontSize = 14.sp,
+                color = Color.Gray,
+                fontWeight = FontWeight.Bold
+            )
+        }
+
+        Spacer(modifier = Modifier.height(16.dp))
+
+        // Tarjeta de créditos
+        Column(
+            modifier = Modifier.fillMaxWidth(),
+            horizontalAlignment = Alignment.CenterHorizontally
+        ) {
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.SpaceEvenly
+            ) {
+                CreditCard(
+                    imageRes = R.drawable.alma,
+                    name = "ALMA CARPIO"
+                )
+                CreditCard(
+                    imageRes = R.drawable.alberto,
+                    name = "ALBERTO CEBREROS"
+                )
+            }
+            Spacer(modifier = Modifier.height(16.dp))
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.SpaceEvenly
+            ) {
+                CreditCard(
+                    imageRes = R.drawable.carlos,
+                    name = "CARLOS HERRERA"
+                )
+                CreditCard(
+                    imageRes = R.drawable.mariana,
+                    name = "MARIANA HERNÁNDEZ"
+                )
+            }
+            Spacer(modifier = Modifier.height(16.dp))
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.Center
+            ) {
+                CreditCard(
+                    imageRes = R.drawable.melissa,
+                    name = "MELISSA MIRELES"
+                )
+            }
+        }
+
+        Spacer(modifier = Modifier.height(24.dp))
+
+        // Footer
+        Box(
+            modifier = Modifier.fillMaxWidth(),
+            contentAlignment = Alignment.Center
+        ) {
+            Image(
+                painter = painterResource(id = R.drawable.logo_tec),
+                contentDescription = "Tec Logo",
+                modifier = Modifier.size(120.dp)
+            )
+        }
+    }
+}
+
+@Composable
+fun CreditCard(imageRes: Int, name: String) {
+    Column(
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier.padding(horizontal = 16.dp)
+    ) {
+        Image(
+            painter = painterResource(id = imageRes),
+            contentDescription = name,
+            modifier = Modifier
+                .size(100.dp)
+        )
+        Spacer(modifier = Modifier.height(8.dp))
+        Text(
+            text = name,
+            fontWeight = FontWeight.Bold,
+            fontSize = 14.sp,
+            color = Color(0xFF191919)
+        )
+    }
+}
Index: app/src/main/java/mx/acg/zazil/view/NavHost.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mx.acg.zazil.view\r\n\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n@Composable\r\nfun AppNavHost(\r\n    auth: FirebaseAuth,\r\n    signInWithGoogle: () -> Unit,\r\n    navController: NavHostController\r\n) {\r\n    val currentBackStackEntry = navController.currentBackStackEntryAsState()\r\n\r\n    // Condiciona la visibilidad de la NavBar dependiendo de la ruta actual\r\n    val currentRoute = currentBackStackEntry.value?.destination?.route\r\n    val showNavBar = currentRoute != \"login\" && currentRoute != \"register\"\r\n\r\n    Scaffold(\r\n        bottomBar = {\r\n            if (showNavBar) {\r\n                NavBar(navController) // Muestra NavBar solo si no estás en las pantallas de login o register\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        NavHost(\r\n            navController = navController,\r\n            startDestination = \"login\",\r\n            modifier = Modifier.padding(innerPadding)\r\n        ) {\r\n            composable(\"login\") {\r\n                LoginScreen(navController = navController, signInWithGoogle = signInWithGoogle)\r\n            }\r\n\r\n            composable(\"register\") {\r\n                RegisterScreen(navController = navController)\r\n            }\r\n\r\n            composable(\"productDetail/{productId}\") { backStackEntry ->\r\n                val productId = backStackEntry.arguments?.getString(\"productId\")?.toIntOrNull()\r\n                if (productId != null) {\r\n                    ProductDetailScreen(productId = productId, navController = navController)\r\n                } else {\r\n                    Text(\"Producto no encontrado\")\r\n                }\r\n            }\r\n\r\n            composable(\"chat\") {\r\n                BlogScreen()\r\n            }\r\n\r\n            composable(\"catalog\") {\r\n                CatalogScreen(navController = navController)\r\n            }\r\n\r\n\r\n            composable(\"profile\") {\r\n                val currentUser = auth.currentUser\r\n                val uid = currentUser?.uid\r\n\r\n                if (uid != null) {\r\n                    ProfileScreen(navController = navController, uid = uid)\r\n                } else {\r\n                    Text(\"No has iniciado sesión\")\r\n                }\r\n            }\r\n\r\n\r\n            composable(\"configuracion\") {\r\n                SettingsScreen(navController = navController)\r\n            }\r\n\r\n            composable(\"update\") {\r\n                UpdateDataScreen(navController = navController)\r\n            }\r\n\r\n            composable(\"carrito\") {\r\n                // Obtener el uid del usuario autenticado en Firebase\r\n                val currentUser = auth.currentUser\r\n                val uid = currentUser?.uid\r\n\r\n                // Pasar el uid al CartScreen\r\n                if (uid != null) {\r\n                    CartScreen(navController = navController, uid = uid)\r\n                } else {\r\n                    Text(\"No has iniciado sesión\")\r\n                }\r\n            }\r\n\r\n\r\n            composable(\"FAQs\") {\r\n                FAQs(navController = navController)\r\n            }\r\n\r\n            composable(\"myShopping/{uid}\") { backStackEntry ->\r\n                // Recupera el argumento `uid` desde la navegación\r\n                val uid = backStackEntry.arguments?.getString(\"uid\") ?: \"\"\r\n\r\n                // Muestra la pantalla MyShoppingScreen con el UID recuperado\r\n                MyShoppingScreen(navController = navController, uid = uid)\r\n            }\r\n\r\n            composable(\"shoppingDetails/{orderId}/{uid}\") { backStackEntry ->\r\n                val orderId = backStackEntry.arguments?.getString(\"orderId\")?.toInt() ?: 0\r\n                val uid = backStackEntry.arguments?.getString(\"uid\") ?: \"\"\r\n\r\n                MyShoppingDetailsScreen(\r\n                    navController = navController,\r\n                    orderId = orderId,\r\n                    uid = uid\r\n                )\r\n            }\r\n\r\n            composable(\"endShopping\") {\r\n                EndShoppingScreen(navController = navController)\r\n            }\r\n\r\n            composable(\"payment\") {\r\n                PaymentScreen(navController = navController)\r\n            }\r\n            composable(\"settings\") { SettingsScreen(navController) }\r\n\r\n            composable(\"TyC\") { TyC(navController) }\r\n\r\n            composable(\"aboutUs\") { AboutUsScreen(navController) }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/mx/acg/zazil/view/NavHost.kt b/app/src/main/java/mx/acg/zazil/view/NavHost.kt
--- a/app/src/main/java/mx/acg/zazil/view/NavHost.kt	(revision 7adf3757c4a5eee3f6785a3bc8e88214c2166660)
+++ b/app/src/main/java/mx/acg/zazil/view/NavHost.kt	(date 1728067412953)
@@ -131,6 +131,8 @@
             composable("TyC") { TyC(navController) }
 
             composable("aboutUs") { AboutUsScreen(navController) }
+
+            composable("credits") { CreditsScreen(navController) }
         }
     }
 }
